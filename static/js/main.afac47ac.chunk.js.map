{"version":3,"sources":["Header.js","api/pdfService.js","PdfUpload.js","App.js","reportWebVitals.js","index.js"],"names":["Header","Navbar","fixed","bg","variant","Brand","src","width","height","className","alt","Collapse","Nav","Link","href","target","OverlayTrigger","placement","overlay","Tooltip","size","getFilename","disposition","filename","split","trim","err","console","log","baseUrl","file","a","formData","FormData","append","fetch","method","body","then","r","json","data","status","response","url","taskId","headers","get","state","blob","PdfUpload","useEffect","bsCustomFileInput","init","refreshIntervalId","useState","showProgress","setShowProgress","progress","setProgress","label","setLabel","saved","serviceUrl","checkStatus","task_id","getPredictStatus","result","clearInterval","newBlob","Blob","type","window","navigator","msSaveOrOpenBlob","URL","createObjectURL","link","document","createElement","download","replace","click","setTimeout","revokeObjectURL","info","message","match","exec","parseInt","Form","style","Group","controlId","Label","File","accept","data-browse","custom","onChange","event","files","name","predictPdf","resp","setInterval","ProgressBar","animated","now","Math","round","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.afac47ac.chunk.js","sourcesContent":["import { Navbar, Nav, OverlayTrigger, Tooltip } from 'react-bootstrap';\r\nimport { FaGithub } from 'react-icons/fa';\r\n\r\nconst Header = () => {\r\n    return(\r\n      <Navbar fixed=\"top\" bg=\"primary\" variant=\"dark\">\r\n        <Navbar.Brand>\r\n          <img src=\"pdf-icon.png\" width=\"30\" height=\"30\" className=\"d-inline-block align-top\" alt=\"Auto Detect PDF Fields\" />\r\n          {' '}Auto Detect PDF Fields\r\n        </Navbar.Brand>\r\n        <Navbar.Collapse className=\"justify-content-end\">\r\n          <Nav className=\"me-auto\">\r\n            <Nav.Link href=\"https://github.com/chengliwang/pdf-field-detection-ui\" target=\"_blank\">             \r\n              <OverlayTrigger key=\"bottom\" placement=\"bottom\"\r\n                overlay={\r\n                  <Tooltip>Github</Tooltip>\r\n                }\r\n              >\r\n                 <FaGithub size=\"24\" />\r\n              </OverlayTrigger>\r\n            </Nav.Link>\r\n          </Nav>\r\n        </Navbar.Collapse>\r\n      </Navbar>\r\n    );\r\n}\r\n\r\nexport default Header;","const getFilename = (disposition) => {\r\n    let filename = \"download.pdf\";\r\n    try{\r\n        filename = disposition.split(';')[1].split('=')[1].trim();\r\n    } catch(err) {\r\n        console.log(err);\r\n    }\r\n    return filename;\r\n}\r\n\r\nexport async function predictPdf(baseUrl, file) {\r\n    try\r\n    {\r\n        const formData = new FormData();\r\n        formData.append('pdf', file);\r\n        let response = await\r\n            fetch(`${baseUrl}/v1/predict`, {\r\n                method: 'POST',\r\n                body: formData\r\n            })\r\n            .then(r =>  r.json().then(data => ({\r\n                status: r.status, \r\n                response: data\r\n            })))\r\n        return await response;\r\n    }\r\n    catch(err)\r\n    {\r\n        console.log(err);\r\n    }\r\n}\r\n\r\nexport async function getPredictStatus(baseUrl, url, taskId) {\r\n    try {\r\n        let response = await\r\n            fetch(`${baseUrl}${url}/${taskId}`, {\r\n                method: 'GET'\r\n            })\r\n            .then(r => r.headers.get(\"Content-Type\") === 'application/json' ? \r\n                            r.json() : {\r\n                                state: 'SUCCESS',\r\n                                filename: getFilename(r.headers.get('content-disposition') || ''),\r\n                                blob: r.blob()\r\n                            })\r\n        return await response;\r\n    }\r\n    catch(err)\r\n    {\r\n        console.log(err);\r\n    }\r\n}","import React, { useEffect, useState } from \"react\";\r\nimport { Form, ProgressBar } from 'react-bootstrap';\r\nimport bsCustomFileInput from \"bs-custom-file-input\"\r\nimport { predictPdf, getPredictStatus } from \"./api/pdfService\";\r\n\r\nconst PdfUpload = () => {\r\n  useEffect(() => {bsCustomFileInput.init()}, []);\r\n  let [ showProgress, setShowProgress ] = useState(false);\r\n  let [ progress, setProgress ] = useState(0);\r\n  let [ label, setLabel ] = useState(\"\");\r\n  let refreshIntervalId;\r\n  let saved = false;\r\n  let serviceUrl = \"https://pdf-field-detection-svc.eastus2.azurecontainer.io\";\r\n\r\n  const savePdf = (response) => {\r\n    setProgress(100);\r\n    setLabel(\"Saving the file ...\");        \r\n    response.blob.then((blob) => {            \r\n      const newBlob = new Blob([blob], { type: 'application/pdf' });          \r\n      if (window.navigator && window.navigator.msSaveOrOpenBlob) {\r\n          window.navigator.msSaveOrOpenBlob(newBlob);\r\n      } else {         \r\n        const url = window.URL.createObjectURL(newBlob);\r\n        let link = document.createElement('a');\r\n        link.href = url;\r\n        link.download = response.filename.replace(' ', '')\r\n        link.click();\r\n        setTimeout(() => { window.URL.revokeObjectURL(url); }, 250);\r\n      }\r\n      setShowProgress(false);\r\n      setProgress(0);\r\n    })    \r\n  }  \r\n    \r\n  const checkStatus = (url, task_id) => {\r\n    getPredictStatus(serviceUrl, url, task_id).then(result => {\r\n        if (result.state === 'SUCCESS') {\r\n            clearInterval(refreshIntervalId);\r\n            if (!saved) {\r\n                savePdf(result);\r\n                saved = true;\r\n            }        \r\n        } else if (result.state === 'PROGRESS') {\r\n            setLabel(result.info);\r\n            let message = result.info;\r\n            if (message.match(/Removing password/i)) {                    \r\n                setProgress(5);\r\n            }                    \r\n            else if (message.match(/Get.*prediction/i)) {\r\n                setProgress(95);\r\n            }                    \r\n            else {\r\n                var regex = /Extracting page (\\d+) of (\\d+)/i;\r\n                var match = regex.exec(message);\r\n                if (match != null) {\r\n                    setProgress(progress + parseInt(match[1]) * 90.0 / parseInt(match[2]) );\r\n                }\r\n            }                \r\n        } else if (result.state === 'FAILURE') {\r\n            clearInterval(refreshIntervalId);\r\n            setLabel(result.info);\r\n        }\r\n    });\r\n  }\r\n\r\n  const uploadPdf = (event) => {    \r\n    saved = false;\r\n    let file = event.target.files[0];\r\n    if (file) {\r\n        setShowProgress(true);\r\n        setProgress(0);\r\n        setLabel('Uploading ' + file.name + ' ....');\r\n        predictPdf(serviceUrl, file).then(resp => {\r\n          if (resp?.status === 202) {\r\n            setProgress(3);\r\n            refreshIntervalId = setInterval(() => {\r\n              checkStatus(resp.response.url, resp.response.task_id);\r\n            }, 200)\r\n          }\r\n          else {\r\n              setLabel(\"Error uploading PDF: status code \" + resp?.status);\r\n          }\r\n        });\r\n    }\r\n  };\r\n\r\n  return(\r\n    <div>\r\n      <Form style={{ width: '50%' }}>\r\n        <Form.Group controlId=\"uploadPdf\">\r\n          <Form.Label>\r\n            Detecting form fields in a PDF using machine learning.\r\n          </Form.Label>\r\n          <Form.File type=\"file\" accept=\"application/pdf\" label=\"\" data-browse=\"Upload PDF File\" custom onChange={uploadPdf} />   \r\n        </Form.Group>      \r\n      </Form>\r\n    {showProgress ?\r\n      <div>\r\n        <span>{label}</span>\r\n        <ProgressBar animated now={progress} label={`${Math.round(progress)}%`} />\r\n      </div> :\r\n      <div />\r\n    }\r\n    </div>    \r\n  );\r\n}\r\n\r\nexport default PdfUpload;\r\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport Header from './Header';\nimport PdfUpload from './PdfUpload';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <PdfUpload />\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}